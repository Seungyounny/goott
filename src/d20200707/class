클래스 (Class)
: 하나의 클래스는 메모리 할당 시 다양한 값을 가지게 되며 객체라고 불린다.
: 하나의 객체는 독립적으로 사용된다

생성자 ( Constructor)
: 클래스 명과 동일
: return(), void() (X)
: 객체 생성 시 초기값을 할당할 수 있음
==> 객체 초기화를 목적으로 하는 아주 특별한 메소드
: 생략 시, jvm이 적어도 1개의 생성자는 존재하는  것으로 간주 


메소드 
method (함수) : 멤버 변수 (데이터)를 조작하고 처리하는 역할
method 대상 : 2번이상 호출되는 로직이나 향후 호출될 가능성이 있는 로직 

void


+ 명명법

1. A-X, a-z, 0~9, _, $
2. 길이에 제한 X
3. 예약어 사용 x  ex) if, goto, for,...
4. 의미있게 지어야 한다.
5. 상수는 대문자 ex)MAX_VALUE

개발자 관례
- Class 
 1. 첫글자 대문자
 2. 두 단어 이상의 합성어 일 경우
  --> super man => SuperMan
 
 - 멤버 변수 
 1. 첫 글자는 소문자 (클래스와 구분하기 위해)
 2. 두 단어 이상 합성일 경우 class와 동일
    ex) max vlaue : maxValue ( 
    
 - 메소드
 1, 2 는 멤버변수와 동일
 3. 단어 끝에 () 포함
 
 - 생성자
 1, 2 클래스와 동일 
 3. 단어 끝에 () 포함
 
 
 + 접근 한정자 ( Access Modifier, 제한자, 수정자 )
 : 다른 클래스에서 현재 클래스의 필드 (멤버변수) 와 메소드 (함수) 의 접근 가능 여부를 선언하는 기법
 
 특징 
 1) 클래스 간의 멤버 변수나 멤버 메소드에 접근하는 것을 제한할 수  있다.
 2) 클래스 간에 간섭을 막을 수 있으므로 콤포넌트의 독립성을 강화 할 수 있다.
 3) 객체지향의 캡슐화를 구현하는 핵심 기술
 4) 상세화
 
 modifier				Class		Package		SubClass	World
------------------------------------------------------------------
public		  		 	O				O			O		  O
protected				O				O			O		  X
no modifier (default)	O				O			X		  X
private 				O				X			X		  X

5) 일반적으로 필드 (변수, 데이터)는 private 선언,
메소드는 public을 사용하면 OOP 구현하는 데 크게 지장이 없음
ㄴ
 
 
 
